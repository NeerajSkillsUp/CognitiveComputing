# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1-qNlRbS4c2D5ERLzB65IykaBvA3i_p

# Assignment 5

Ques 1 : For the array gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]'), Find

i. Sum of all elements

ii. Sum of all elements row-wise

iii. Sum of all elements column-wise
"""

import numpy as np
gfg=np.matrix('[4,1,9;12,3,1;4,5,6]')
st=np.sum(gfg)
print(f"sum of all elements : {st}")
sr=np.sum(gfg,axis=1)
print(f"sum of row elements : {sr}")
sc=np.sum(gfg,axis=0)
print(f"sum of col elements : {sc}")

"""Ques 2 : (a)For the array: array = np.array([10, 52, 62, 16, 16, 54, 453]), find

i. Sorted array

ii. Indices of sorted array

iii. 4 smallest elements

iv. 5 largest elements

(b) For the array: array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0]), find

i. Integer elements only

ii. Float elements only
"""

import numpy as np
import math as m
# 2(a)
arr=np.array([10,52,62,16,16,54,453])
print(f"sorted arr : {np.sort(arr)}")
print(f"indices of sorted elements : {np.argsort(arr)}")
print(f"4 smallest elements : {np.sort(arr)[:4]}")
print(f"5 largest elements : {np.sort(arr)[-5:]}")

# 2(b)
brr=np.array([1.0,1.2,2.2,2.0,3.0,2.0])
int_elm=[]
float_elm=[]
for elm in brr:
  if elm==m.floor(elm):
    int_elm.append(int(elm))
  else:
    float_elm.append(float(elm))

print(f"integer elements : {int_elm}")
print(f"float elements : {float_elm}")

"""Ques 3 :
You are given a weekly sales dataset and need to perform various operations using NumPy broadcasting.

a) Generate your unique sales dataset:  Take the sum of the ASCII values of the initials of your first and last name. Call this value X. (If your initials are A B → ASCII sum = 65

66 = 131 → sales = [131, 181, 231, 281, 331].)  Create a NumPy array sales with values [X, X+50, X+100, X+150, X+200].
b) Compute your personalized tax rate as ((X % 5) + 5) / 100.  Use broadcasting to apply this tax rate to each sales value.

c) Adjust sales based on discount:  If sales < X+100, apply a 5% discount.  If sales >= X+100, apply a 10% discount.

d) Expand sales data for multiple weeks:  Create a 3x5 matrix representing three weeks of sales by stacking sales three times using broadcasting.  Increase sales by 2% per week using element-wise broadcasting.
"""

import numpy as np

# 3(a)
initials=['N','B']
X=sum(ord(char) for char in initials)
print(f"X : {X}")
sales=np.array([X,X+50,X+100,X+150,X+200])
print(f"sales : {sales}")

# 3(b)
tax_rate=((X%5)+5)/100
total=sales+sales*tax_rate
print(f"sales after Tax : {total}")

# 3(c)
discounts=np.where(sales<X+100,sales*0.05,sales*0.1)
discounted_sales=sales-discounts
print(f"Discounted sales : {discounted_sales}")

# 3(d)
weeks=3
weekly_sales=np.tile(sales,(weeks,1))
growth_factors=(1.02)**np.arange(weeks).reshape(-1,1)
final_sales=weekly_sales*growth_factors
print(f"sales of 3 weeks : \n{final_sales}")

"""Ques 4 : Generate x values using np.linspace() from -10 to 10 with 100 points. Use
each function from the list below and compute y values using NumPy:

 Y = x2

 Y = sin(x)

 Y = ex

 Y = log(|x| + 1)

Plot the chosen function using Matplotlib. Add title, labels, and grid for clarity.
"""

import numpy as np
from matplotlib import pyplot

x=np.linspace(-10,10,100)
y1=x**2
y2=np.sin(x)
y3=np.exp(x)
y4=np.log(np.abs(x)+1)

pyplot.subplot(2,2,1)
pyplot.subplots_adjust(wspace=0.5, hspace=0.5)
pyplot.plot(x,y1,label='y=x^2')
pyplot.title("y=x^2")
pyplot.xlabel("x")
pyplot.ylabel("y")
pyplot.grid(True)

pyplot.subplot(2,2,2)
pyplot.subplots_adjust(wspace=0.5, hspace=0.5)
pyplot.plot(x,y2,label='y=sin(x)')
pyplot.title("y=sin(x)")
pyplot.xlabel("x")
pyplot.ylabel("y")
pyplot.grid(True)

pyplot.subplot(2,2,3)
pyplot.subplots_adjust(wspace=0.5, hspace=0.5)
pyplot.plot(x,y3,label='y=e^x')
pyplot.title("y=e^x")
pyplot.xlabel("x")
pyplot.ylabel("y")
pyplot.grid(True)

pyplot.subplot(2,2,4)
pyplot.subplots_adjust(wspace=0.5, hspace=0.5)
pyplot.plot(x,y4,label='y=log(|x|+1)')
pyplot.title("y=log(|x|+1)")
pyplot.xlabel("x")
pyplot.ylabel("y")
pyplot.grid(True)